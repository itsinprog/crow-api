"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const console_1 = require("console");
const CrowApi = require("../lib/crow-api-stack");
function getLogicalId(stack, resource) {
    return stack.getLogicalId(resource.node.findChild('Resource'));
}
// This function would need work if there were path parts with the same name
function findApiGResourceByPath(template, path) {
    const resource = template.findResources('AWS::ApiGateway::Resource', {
        Properties: {
            PathPart: path,
        },
    });
    const resKeys = Object.keys(resource);
    if (resKeys.length !== 1) {
        console_1.assert(false, `Could not find /${path} resource.`);
    }
    const [logicalId] = resKeys;
    return logicalId;
}
// example test. To run these tests, uncomment this file along with the
// example resource in lib/crow-api-stack.ts
test('API Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new CrowApi.CrowApiStack(app, 'MyTestStack', {
        crowApiProps: {
            sourceDirectory: 'test/testsrc',
            apiGatewayConfiguration: {
                restApiName: 'testing-crow-api',
            },
        },
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    const restApiLogicalId = getLogicalId(stack, stack.api.gateway);
    // Check API Gateway
    template.hasResourceProperties('AWS::ApiGateway::RestApi', {
        Name: 'testing-crow-api',
    });
    // Check resources to make sure that they are all correct
    template.hasResourceProperties('AWS::ApiGateway::Resource', {
        ParentId: {
            'Fn::GetAtt': [
                restApiLogicalId,
                'RootResourceId',
            ],
        },
        PathPart: 'v1',
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    const v1LogicalId = findApiGResourceByPath(template, 'v1');
    template.hasResourceProperties('AWS::ApiGateway::Resource', {
        ParentId: {
            Ref: v1LogicalId,
        },
        PathPart: 'authors',
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    template.hasResourceProperties('AWS::ApiGateway::Resource', {
        ParentId: {
            Ref: v1LogicalId,
        },
        PathPart: 'book',
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    template.hasResourceProperties('AWS::ApiGateway::Resource', {
        ParentId: {
            Ref: v1LogicalId,
        },
        PathPart: 'chapters',
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    // Check methods to make sure that they are all correct
    const authorsLogicalId = findApiGResourceByPath(template, 'authors');
    const bookLogicalId = findApiGResourceByPath(template, 'book');
    const chaptersLogicalId = findApiGResourceByPath(template, 'chapters');
    template.hasResourceProperties('AWS::ApiGateway::Method', {
        HttpMethod: 'GET',
        ResourceId: {
            Ref: authorsLogicalId,
        },
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    template.hasResourceProperties('AWS::ApiGateway::Method', {
        HttpMethod: 'POST',
        ResourceId: {
            Ref: authorsLogicalId,
        },
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    template.hasResourceProperties('AWS::ApiGateway::Method', {
        HttpMethod: 'GET',
        ResourceId: {
            Ref: bookLogicalId,
        },
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    template.hasResourceProperties('AWS::ApiGateway::Method', {
        HttpMethod: 'POST',
        ResourceId: {
            Ref: bookLogicalId,
        },
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
    template.hasResourceProperties('AWS::ApiGateway::Method', {
        HttpMethod: 'GET',
        ResourceId: {
            Ref: chaptersLogicalId,
        },
        RestApiId: {
            Ref: restApiLogicalId,
        },
    });
});
//# sourceMappingURL=data:application/json;base64,